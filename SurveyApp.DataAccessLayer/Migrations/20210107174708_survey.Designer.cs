// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurveyApp.DataAccessLayer;

namespace SurveyApp.DataAccessLayer.Migrations
{
    [DbContext(typeof(SurveyAppDbContext))]
    [Migration("20210107174708_survey")]
    partial class survey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.OfferedAnswersDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OfferedAnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SurveyAnswerDtoId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsAnswerDtoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsersDtoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyAnswerDtoId");

                    b.HasIndex("SurveyQuestionsAnswerDtoId");

                    b.HasIndex("UsersDtoId");

                    b.ToTable("OfferedAnswersDtos");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.QuestionsDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("QuestionExpiresOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SurveyAnswerDtoId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsAnswerDtoId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsDtoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsersDtoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyAnswerDtoId");

                    b.HasIndex("SurveyQuestionsAnswerDtoId");

                    b.HasIndex("SurveyQuestionsDtoId");

                    b.HasIndex("UsersDtoId");

                    b.ToTable("QuestionsDtos");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.RolesDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RolesDtos");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyAnswerDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("OfferedAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("OfferedAnswersId")
                        .HasColumnType("int");

                    b.Property<string>("OtherText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfferedAnswersId");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UsersId");

                    b.ToTable("SurveyAnswerDtos");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyCategoryDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("NameCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubNameCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SurveyQuestionsDtoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionsDtoId");

                    b.ToTable("SurveyCategoryDtos");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int?>("SurveyAnswerDtoId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsAnswerDtoId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsDtoId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SurveyAnswerDtoId");

                    b.HasIndex("SurveyQuestionsAnswerDtoId");

                    b.HasIndex("SurveyQuestionsDtoId");

                    b.ToTable("SurveyDtos");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyQuestionsAnswerDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OfferedAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("OfferedAnswersId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfferedAnswersId");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UsersId");

                    b.ToTable("SurveyQuestionsAnswerDtos");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyQuestionsDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UsersId");

                    b.ToTable("SurveyQuestionsDtos");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.UsersDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastLoginDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SurveyAnswerDtoId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsAnswerDtoId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsDtoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserPasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.HasIndex("SurveyAnswerDtoId");

                    b.HasIndex("SurveyQuestionsAnswerDtoId");

                    b.HasIndex("SurveyQuestionsDtoId");

                    b.ToTable("UsersDtos");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.OfferedAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("OfferedAnswerText")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("SurveyAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsAnswerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SurveyAnswerId");

                    b.HasIndex("SurveyQuestionsAnswerId");

                    b.ToTable("OfferedAnswers");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("QuestionExpiresOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("SurveyAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyAnswerId");

                    b.HasIndex("SurveyQuestionsAnswerId");

                    b.HasIndex("SurveyQuestionsId");

                    b.HasIndex("UsersId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int?>("SurveyAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SurveyAnswerId");

                    b.HasIndex("SurveyQuestionsAnswerId");

                    b.HasIndex("SurveyQuestionsId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("OfferedAnswerId")
                        .HasColumnType("int");

                    b.Property<string>("OtherText")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfferedAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("NameCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubNameCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("SurveyQuestionsId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionsId");

                    b.ToTable("SurveyCategories");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyQuestionsAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OfferedAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OfferedAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyQuestionsAnswers");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailUser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("LastLoginDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SurveyAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyQuestionsId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserPasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SurveyAnswerId");

                    b.HasIndex("SurveyQuestionsAnswerId");

                    b.HasIndex("SurveyQuestionsId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyApp.DomainClass.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.OfferedAnswersDto", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyAnswerDto", null)
                        .WithMany("childOfferedAnswersDto")
                        .HasForeignKey("SurveyAnswerDtoId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyQuestionsAnswerDto", null)
                        .WithMany("ChildOfferedAnswersDto")
                        .HasForeignKey("SurveyQuestionsAnswerDtoId");

                    b.HasOne("SurveyApp.DomainClass.Dto.UsersDto", null)
                        .WithMany("ChildOfferedAnswersDto")
                        .HasForeignKey("UsersDtoId");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.QuestionsDto", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyAnswerDto", null)
                        .WithMany("ChildQuestionsDto")
                        .HasForeignKey("SurveyAnswerDtoId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyQuestionsAnswerDto", null)
                        .WithMany("ChildQuestionsDto")
                        .HasForeignKey("SurveyQuestionsAnswerDtoId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyQuestionsDto", null)
                        .WithMany("ChlidQuestionsDto")
                        .HasForeignKey("SurveyQuestionsDtoId");

                    b.HasOne("SurveyApp.DomainClass.Dto.UsersDto", null)
                        .WithMany("ChildQuestionsDto")
                        .HasForeignKey("UsersDtoId");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyAnswerDto", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Dto.OfferedAnswersDto", "OfferedAnswers")
                        .WithMany()
                        .HasForeignKey("OfferedAnswersId");

                    b.HasOne("SurveyApp.DomainClass.Dto.QuestionsDto", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionsId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyDto", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId");

                    b.HasOne("SurveyApp.DomainClass.Dto.UsersDto", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("OfferedAnswers");

                    b.Navigation("Questions");

                    b.Navigation("Survey");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyCategoryDto", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyQuestionsDto", null)
                        .WithMany("ChlidSurveyCategoryDto")
                        .HasForeignKey("SurveyQuestionsDtoId");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyDto", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyAnswerDto", null)
                        .WithMany("ChildSurveysDto")
                        .HasForeignKey("SurveyAnswerDtoId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyQuestionsAnswerDto", null)
                        .WithMany("ChildSurveyDto")
                        .HasForeignKey("SurveyQuestionsAnswerDtoId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyQuestionsDto", null)
                        .WithMany("ChildSurveyDto")
                        .HasForeignKey("SurveyQuestionsDtoId");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyQuestionsAnswerDto", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Dto.OfferedAnswersDto", "OfferedAnswers")
                        .WithMany()
                        .HasForeignKey("OfferedAnswersId");

                    b.HasOne("SurveyApp.DomainClass.Dto.QuestionsDto", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionsId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyDto", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyApp.DomainClass.Dto.UsersDto", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("OfferedAnswers");

                    b.Navigation("Questions");

                    b.Navigation("Survey");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyQuestionsDto", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyCategoryDto", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyApp.DomainClass.Dto.QuestionsDto", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionsId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyDto", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyApp.DomainClass.Dto.UsersDto", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId");

                    b.Navigation("Category");

                    b.Navigation("Questions");

                    b.Navigation("Survey");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.UsersDto", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Dto.RolesDto", "Roles")
                        .WithMany()
                        .HasForeignKey("RolesId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyAnswerDto", null)
                        .WithMany("ChildUsersDto")
                        .HasForeignKey("SurveyAnswerDtoId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyQuestionsAnswerDto", null)
                        .WithMany("ChildUsersDto")
                        .HasForeignKey("SurveyQuestionsAnswerDtoId");

                    b.HasOne("SurveyApp.DomainClass.Dto.SurveyQuestionsDto", null)
                        .WithMany("ChildUsersDto")
                        .HasForeignKey("SurveyQuestionsDtoId");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.OfferedAnswers", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyAnswer", null)
                        .WithMany("ChildOfferedAnswers")
                        .HasForeignKey("SurveyAnswerId");

                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyQuestionsAnswer", null)
                        .WithMany("ChildOfferedAnswers")
                        .HasForeignKey("SurveyQuestionsAnswerId");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.Questions", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyAnswer", null)
                        .WithMany("ChildQuestions")
                        .HasForeignKey("SurveyAnswerId");

                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyQuestionsAnswer", null)
                        .WithMany("ChildQuestions")
                        .HasForeignKey("SurveyQuestionsAnswerId");

                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyQuestions", null)
                        .WithMany("ChlidQuestions")
                        .HasForeignKey("SurveyQuestionsId");

                    b.HasOne("SurveyApp.DomainClass.Entities.Users", null)
                        .WithMany("ChildQuestions")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.Survey", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyAnswer", null)
                        .WithMany("ChildSurveys")
                        .HasForeignKey("SurveyAnswerId");

                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyQuestionsAnswer", null)
                        .WithMany("ChildSurvey")
                        .HasForeignKey("SurveyQuestionsAnswerId");

                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyQuestions", null)
                        .WithMany("ChildSurvey")
                        .HasForeignKey("SurveyQuestionsId");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyAnswer", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.OfferedAnswers", "OfferedAnswers")
                        .WithMany()
                        .HasForeignKey("OfferedAnswerId");

                    b.HasOne("SurveyApp.DomainClass.Entities.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("SurveyApp.DomainClass.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId");

                    b.HasOne("SurveyApp.DomainClass.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OfferedAnswers");

                    b.Navigation("Questions");

                    b.Navigation("Survey");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyCategory", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyQuestions", null)
                        .WithMany("ChlidSurveyCategory")
                        .HasForeignKey("SurveyQuestionsId");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyQuestions", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyApp.DomainClass.Entities.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyApp.DomainClass.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyApp.DomainClass.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Questions");

                    b.Navigation("Survey");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyQuestionsAnswer", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.OfferedAnswers", "OfferedAnswers")
                        .WithMany()
                        .HasForeignKey("OfferedAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyApp.DomainClass.Entities.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyApp.DomainClass.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyApp.DomainClass.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OfferedAnswers");

                    b.Navigation("Questions");

                    b.Navigation("Survey");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.Users", b =>
                {
                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyAnswer", null)
                        .WithMany("ChildUsers")
                        .HasForeignKey("SurveyAnswerId");

                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyQuestionsAnswer", null)
                        .WithMany("ChildUsers")
                        .HasForeignKey("SurveyQuestionsAnswerId");

                    b.HasOne("SurveyApp.DomainClass.Entities.SurveyQuestions", null)
                        .WithMany("ChildUsers")
                        .HasForeignKey("SurveyQuestionsId");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyAnswerDto", b =>
                {
                    b.Navigation("childOfferedAnswersDto");

                    b.Navigation("ChildQuestionsDto");

                    b.Navigation("ChildSurveysDto");

                    b.Navigation("ChildUsersDto");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyQuestionsAnswerDto", b =>
                {
                    b.Navigation("ChildOfferedAnswersDto");

                    b.Navigation("ChildQuestionsDto");

                    b.Navigation("ChildSurveyDto");

                    b.Navigation("ChildUsersDto");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.SurveyQuestionsDto", b =>
                {
                    b.Navigation("ChildSurveyDto");

                    b.Navigation("ChildUsersDto");

                    b.Navigation("ChlidQuestionsDto");

                    b.Navigation("ChlidSurveyCategoryDto");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Dto.UsersDto", b =>
                {
                    b.Navigation("ChildOfferedAnswersDto");

                    b.Navigation("ChildQuestionsDto");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyAnswer", b =>
                {
                    b.Navigation("ChildOfferedAnswers");

                    b.Navigation("ChildQuestions");

                    b.Navigation("ChildSurveys");

                    b.Navigation("ChildUsers");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyQuestions", b =>
                {
                    b.Navigation("ChildSurvey");

                    b.Navigation("ChildUsers");

                    b.Navigation("ChlidQuestions");

                    b.Navigation("ChlidSurveyCategory");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.SurveyQuestionsAnswer", b =>
                {
                    b.Navigation("ChildOfferedAnswers");

                    b.Navigation("ChildQuestions");

                    b.Navigation("ChildSurvey");

                    b.Navigation("ChildUsers");
                });

            modelBuilder.Entity("SurveyApp.DomainClass.Entities.Users", b =>
                {
                    b.Navigation("ChildQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
